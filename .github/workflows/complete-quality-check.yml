name: Complete Quality Check

on:
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: "20"
  JAVA_VERSION: "11"

jobs:
  backend-complete:
    name: Backend Complete Tests
    runs-on: ubuntu-latest
    environment: SMASHLY

    defaults:
      run:
        working-directory: ./backend/api

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "./backend/api/package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

      - name: Generate coverage report
        run: npm run test:coverage
        env:
          NODE_ENV: test
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

      - name: Upload backend coverage
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: ./backend/api/coverage/
          retention-days: 30

  # ===========================
  # FRONTEND - Tests Completos
  # ===========================
  frontend-complete:
    name: Frontend Complete Tests
    runs-on: ubuntu-latest
    environment: SMASHLY

    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "./frontend/package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

      - name: Run unit tests
        run: npm run test:unit

      - name: Check if integration tests exist
        id: check-integration-tests
        run: |
          if [ -d "src/__tests__/integration" ] && [ -n "$(find src/__tests__/integration -type f -name '*.test.*' 2>/dev/null)" ]; then
            echo "has_tests=true" >> $GITHUB_OUTPUT
            echo "Integration test files found."
          else
            echo "has_tests=false" >> $GITHUB_OUTPUT
            echo "No integration test files found. Skipping integration tests."
          fi

      - name: Run integration tests
        if: steps.check-integration-tests.outputs.has_tests == 'true'
        run: npm run test:integration

      - name: Generate coverage report
        run: npm run test:coverage

      - name: Upload frontend coverage
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: ./frontend/coverage/
          retention-days: 30

  # ===========================
  # TESTS E2E - MULTI-BROWSER
  # ===========================
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-complete, frontend-complete]
    environment: SMASHLY

    strategy:
      matrix:
        browser: [chrome, firefox]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      # Configurar browsers
      - name: Setup Chrome
        if: matrix.browser == 'chrome'
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable

      - name: Setup Firefox
        if: matrix.browser == 'firefox'
        uses: browser-actions/setup-firefox@v1
        with:
          firefox-version: latest

      # Preparar aplicación
      - name: Install backend dependencies
        working-directory: ./backend/api
        run: npm ci

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build backend
        working-directory: ./backend/api
        run: npm run build

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

      # Iniciar aplicación en background
      - name: Start backend server
        working-directory: ./backend/api
        run: |
          npm start &
          echo $! > backend.pid
        env:
          NODE_ENV: test
          PORT: 3000
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          FRONTEND_URL: http://localhost:3000

      - name: Start frontend server
        working-directory: ./frontend
        run: |
          npm run preview -- --port 5173 --host 0.0.0.0 &
          echo $! > frontend.pid
        env:
          VITE_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

      # Esperar que los servicios estén listos
      - name: Wait for services
        run: |
          echo "Waiting for backend..."
          timeout 60 bash -c 'until curl -f http://localhost:3000/api/health; do sleep 2; done'
          echo "Backend is ready!"

          echo "Waiting for frontend..."
          timeout 60 bash -c 'until curl -f http://localhost:5173; do sleep 2; done'
          echo "Frontend is ready!"

          echo "All services are ready!"

      # Ejecutar tests E2E
      - name: Run E2E tests (${{ matrix.browser }})
        run: |
          cd testing
          mvn test -Dtest=E2ETestSuite -Dtest.browser=${{ matrix.browser }} -Dtest.headless=true -Dfrontend.url=http://localhost:5173 -Dapi.url=http://localhost:3000
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

      # Cleanup
      - name: Stop services
        if: always()
        run: |
          if [ -f "./backend/api/backend.pid" ]; then
            kill $(cat ./backend/api/backend.pid) || true
          fi
          if [ -f "./frontend/frontend.pid" ]; then
            kill $(cat ./frontend/frontend.pid) || true
          fi

      - name: Upload E2E test results (${{ matrix.browser }})
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results-${{ matrix.browser }}
          path: |
            ./testing/target/surefire-reports/
            ./testing/target/screenshots/
          retention-days: 30

  # ===========================
  # SECURITY SCAN
  # ===========================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    environment: SMASHLY

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Audit backend dependencies
        working-directory: ./backend/api
        run: |
          npm ci
          npm audit fix || true
          npm audit --audit-level=high

      - name: Audit frontend dependencies
        working-directory: ./frontend
        run: |
          npm ci
          npm audit fix || true
          npm audit --audit-level=high || echo "⚠️ Vulnerabilities found, but continuing (only high/critical will fail)"

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: typescript, javascript

      - name: Build for CodeQL
        working-directory: ./backend/api
        run: npm run build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # ===========================
  # RESUMEN FINAL
  # ===========================
  complete-quality-summary:
    name: Complete Quality Summary
    runs-on: ubuntu-latest
    needs: [backend-complete, frontend-complete, e2e-tests, security-scan]
    if: always()

    steps:
      - name: All checks passed
        if: needs.backend-complete.result == 'success' && needs.frontend-complete.result == 'success' && needs.security-scan.result == 'success' && needs.e2e-tests.result == 'success'
        run: |
          echo "ALL QUALITY CHECKS PASSED!"
          echo "Backend tests (unit + integration): SUCCESS"
          echo "Frontend tests (unit + integration): SUCCESS"
          echo "E2E tests (Chrome + Firefox): SUCCESS"
          echo "Security scan: SUCCESS"
          echo ""
          echo "This code is ready to merge to main!"

      - name: Some checks failed
        if: needs.backend-complete.result == 'failure' || needs.frontend-complete.result == 'failure' || needs.e2e-tests.result == 'failure' || needs.security-scan.result == 'failure'
        run: |
          echo "QUALITY CHECKS FAILED!"
          echo "Backend tests: ${{ needs.backend-complete.result }}"
          echo "Frontend tests: ${{ needs.frontend-complete.result }}"
          echo "E2E tests: ${{ needs.e2e-tests.result }}"
          echo "Security scan: ${{ needs.security-scan.result }}"
          echo ""
          echo "This code cannot be merged to main until all checks pass."
          exit 1
